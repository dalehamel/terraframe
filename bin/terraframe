#! /usr/bin/env ruby

lib = File.expand_path(File.dirname(__FILE__) + '/../lib')
$LOAD_PATH.unshift(lib) if File.directory?(lib) && !$LOAD_PATH.include?(lib)

def main()
  require 'logger'
  require 'trollop'
  require 'terraframe'
  require 'awesome_print'

  opts = Trollop::options do
    opt :input_file,        "Input file(s) to process into a Terraform script.",
                            :short => "f", :type => :string, :multi => true, :required => true
    opt :variable_file,     "Variable file (YAML or JSON, not tfvars!).",
                            :short => "v", :type => :string, :multi => true
    opt :override_variable, "'key,value' to be injected into the Terraframe args hash.",
                            :short => "o", :type => :string, :multi => true
    opt :pretty_print,      "Pretty-prints the Terraform output.", :default => true
    opt :verbose,           "Increases logging verbosity.", :default => false
  end

  processor = Terraframe::Processor.new
  if opts[:verbose]
    processor.logger.level = Logger::DEBUG
  end
  processor.logger.debug opts.inspect

  output = processor.process_files(opts[:input_file],
                                   opts[:variable_file] || [],
                                   opts[:override_variable].map { |v| process_property(v) }.to_h )
  if opts[:pretty_print]
    output = JSON.pretty_generate(JSON.parse(output))
  end

  processor.logger.info "Writing output to stdout."
  puts output
end

def process_property(arg)
  tokens = arg.split("=", 2)
  key = tokens[0]
  value = tokens[1]

  [key, value]
end

main()